- Декомпозиция задачи:
Первый этап - определение архитектуры (какие модули должны быть на сценах, чтобы реализовать все механики)
Второй этап - реализация модулей связанных с интерфейсом и сценами
Третий этап - реализация модулей связанных с основной игрой
Четвертый этап - реализация модулей связанных с хранением рекорда и настроек звука
Пятый этап - тестирование и отладка

- Время затраченное на выполнение(время примерное):
Первый этап - 2 часа
Второй этап - 3 часа
Третий этап - 4 часа
Четвертый этап - 3 часа
Пятый этап - 2 часа

Итого: 14 часов

- Чем вы руководствовались при выборе архитектуры игры?
Я хотел поэкспериментировать с паттерном MVC, по этому использовал наработки для него из одного пет-проекта.

- Как вы построили работу с UI, почему именно так?
Архитектура UI по большей части заимствована с прошлого проекта в котором я полноценно участвовал. 
Она мне показалась удобной и простой для повторного использования. Но тут она в несколько упрощенном виде.

- Какими паттернами объектно ориентированного дизайна вы воспользовались при разработке проекта?
Основной паттерн MVC. Вернее его версия, к которой я пришел в одном из пет-проектов. 

- Соблюдаются ли в вашем коде принципы SOLID, если да, какие из них?
Старался соблюдать все принципы.
single responsibility principle - каждый модуль создан чтобы выполнять одну единственную задачу.
open-closed principle - у каждого окна UI можно добавить кнопку закрытия окна из префаба и для этого не 
нужно будет изменять код.
Liskov substitution principle - многие UI элементы унаследованы от абстрактных классов. Другие классы могут 
выполнять основные взаимодействия с наследниками этих классов не зная подробностей о наследнике.
interface segregation principle - для проекта не потребовалось создавать отдельные интерфейсы. Функционала 
абстрактных классов и наследования хватило чтобы реализовать задуманное.
dependency inversion principle - большинство зависимостей классов UI реализовано в виде абстрактных классов.

- Какие изъяны/технический долг есть в этом проекте с точки зрения разработки?
Данная реализация паттерна MVC может быть не очень понятна другим разработчикам.

- Если бы это был коммерческий проект с гораздо большим бюджетом времени на разработку, что бы вы сделали 
по другому?
Сделал бы генерацию труб на пути игрока динамической, тем самым сделав игру бесконечной. Реализовал бы более 
разнообразный UI с точки зрения поведения. 

- Что вызвало у вас наибольшие сложности при разработке этого задания?
Попытка продумать всю архитектуру проекта в очень сжатые сроки. Так же то ли баг, то ли фича, но 
EventSystem.IsPointerOverGameObject всегда возвращал false для билда на андроиде, что приводило к тому, что при 
нажатии на кнопку паузы срабатывала логика обычного тапа и модель игрока делала лишний подъем вверх. Пришлось 
искать решение проблемы.

- Если есть что-то важное, что вы хотели бы сказать про это задание, можете написать в свободной форме.
Это во многом экспериментальное задание, где я использовал использовал решения, которые другим разработчикам 
могут не понравиться. Но мне очень хотелось попробовать некоторые идеи, на которые небыло времени на более 
крупных проектах.